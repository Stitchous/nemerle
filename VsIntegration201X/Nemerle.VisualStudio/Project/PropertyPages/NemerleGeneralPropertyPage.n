using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.WPF;

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Globalization;
using System.Linq;
using System.Windows.Forms;

using Microsoft.VisualStudioTools.Project;

namespace Nemerle.VisualStudio.Project.PropertyPages
{
    [NotifyPropertyChanged]
    class NemerleGeneralPropertyPage : NemerleGridBasedPropertyPage
    {
        class OutputTypeToDescriptionConverter : EnumConverter
        {
            static ClassLibrary       = "Class Library";
            static ConsoleApplication = "Console Application";
            static WindowsApplication = "Windows Application";

            this()
            {
                base(typeof(NemerleOutputType))
            }

            public override CanConvertFrom(_context : ITypeDescriptorContext, sourceType : Type) : bool
            {
                sourceType == typeof(string)
            }

            public override ConvertFrom(_context : ITypeDescriptorContext, _culture : CultureInfo, value : object) : object
            {
                match(value :> string)
                {
                    | ClassLibrary       => NemerleOutputType.Library
                    | ConsoleApplication => NemerleOutputType.Exe
                    | WindowsApplication => NemerleOutputType.WinExe
                    | _                  => NemerleOutputType.Library
                }
            }

            public override CanConvertTo(_context : ITypeDescriptorContext, destinationType : Type) : bool
            {
                destinationType == typeof(string)
            }

            public override ConvertTo(_ : ITypeDescriptorContext, _ : CultureInfo, value : object, _ : Type) : object
            {
                match(value :> NemerleOutputType)
                {
                    | Library => ClassLibrary
                    | Exe     => ConsoleApplication
                    | WinExe  => WindowsApplication
                }
            }
        }

        static ApplicationCategoryName = "Application";
        static ProjectCategoryName     = "Project";

        #region Exposed Properties
        
        [Category(ApplicationCategoryName)]
        [DisplayName("Application Icon")]
        [Description("Sets the .ico file to use as your application icon.")]
        public ApplicationIcon : string { get; set; }

        [RefreshProperties(RefreshProperties.All)]
        [Category(ApplicationCategoryName)]
        [DisplayName("Assembly Name")]
        [Description("The name of the output file that will hold assembly metadata.")]
        public AssemblyName : string { get; set; }

        [Category(ApplicationCategoryName)]
        [DisplayName("Default Namespace")]
        [Description("Specifies the default namespace for added items, such as classes, that are added via the Add New Item Dialog Box.")]
        public DefaultNamespace : string { get; set; }
        
        [RefreshProperties(RefreshProperties.All)]
        [Category(ApplicationCategoryName)]
        [DisplayName("Output Type")]
        [Description("The type of application to build.")]
        [TypeConverter(typeof(OutputTypeToDescriptionConverter))]
        public OutputType : NemerleOutputType { get; set; }

        [Category(ApplicationCategoryName)]
        [DisplayName("Startup Object")]
        [Description("The name of the class that contains the static Main method that you want called when you launch your application.")]
        public StartupObject : string { get; set; }
        
        [Category(ProjectCategoryName)]
        [DisplayName("Output File")]
        [Description("The name of the project's primary output file.")]
        [AutomationBrowsable(false)]
        public OutputFile : string
        {
        	get { Project.BuildProject.ExpandString(AssemblyName) + NemerleProjectNode.GetOutputExtension(OutputType) }
        }

        [Category(ProjectCategoryName)]
        [DisplayName("Project File")]
        [Description("The name of the file containing build, configuration, and other information about the project.")]
        [AutomationBrowsable(false)]
        public ProjectFile : string
        {
        	get { Path.GetFileName(Project.ProjectFile) }
        }

        [Category(ProjectCategoryName)]
        [DisplayName("Project Folder")]
        [Description("The absolute location of the project.")]
        [AutomationBrowsable(false)]
        public ProjectFolder : string
        {
        	get { Path.GetDirectoryName(Project.ProjectFolder) }
        }

        #endregion

        [Browsable(false)]
        [AutomationBrowsable(false)]
        public override PageName : string
        {
            get { "General" }
        }

        protected override SaveSettings() : void 
        {
            SetProperty(NemerleProjectFileConstants.ApplicationIcon, ApplicationIcon);
            SetProperty(ProjectFileConstants.AssemblyName,           AssemblyName);
            SetProperty(ProjectFileConstants.RootNamespace,          DefaultNamespace);
            SetProperty(ProjectFileConstants.OutputType,             this.OutputType);
            SetProperty(NemerleProjectFileConstants.StartupObject,   StartupObject);
        }

        protected override LoadSettings() : void 
        { 
            ApplicationIcon  = GetProperty(NemerleProjectFileConstants.ApplicationIcon);
            AssemblyName     = GetProperty(ProjectFileConstants.AssemblyName);
            DefaultNamespace = GetProperty(ProjectFileConstants.RootNamespace);
            OutputType       = GetProperty(ProjectFileConstants.OutputType);
            StartupObject    = GetProperty(NemerleProjectFileConstants.StartupObject);
        }
    }
}
