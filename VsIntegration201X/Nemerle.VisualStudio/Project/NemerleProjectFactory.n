using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using Microsoft.VisualStudioTools.Project;
using Microsoft.VisualStudio.OLE.Interop;
using Microsoft.VisualStudio.Shell.Interop;

using IOleServiceProvider = Microsoft.VisualStudio.OLE.Interop.IServiceProvider;

namespace Nemerle.VisualStudio.Project
{
    public class NemerleProjectFactory : ProjectFactory, IVsProjectUpgradeViaFactory
    {
        public this(package : NemerleProjectPackage)
        {
            base(package)
        }
        
        internal override CreateProject() : ProjectNode
        {
            def project = NemerleProjectNode(Package);
            
            _ = project.SetSite(Package.GetService.[IOleServiceProvider]());
            project
        }
        
        public new Package : NemerleProjectPackage
        {
            get { base.Package :> NemerleProjectPackage }
        }
        
        public GetSccInfo(bstrProjectFileName : string, pbstrSccProjectName : out string, pbstrSccAuxPath : out string, pbstrSccLocalPath : out string, pbstrProvider : out string) : int
        {
            throw NotImplementedException()
        }
        
        public UpgradeProject_CheckOnly(projectFileName : string, pLogger : IVsUpgradeLogger, pUpgradeRequired : out int, pguidNewProjectFactory : out Guid, pUpgradeProjectCapabilityFlags : out uint) : int 
        {
            throw NotImplementedException()
        }
        
        public UpgradeProject(sourceProjectFilePath : string, fUpgradeFlag : uint, bstrCopyLocation : string, upgradedFullyQualifiedFileName : out string, pLogger : IVsUpgradeLogger, pUpgradeRequired : out int, pguidNewProjectFactory : out Guid) : int
        {
            throw NotImplementedException()
        }
    }
}
